#+title: Bash Configuration
#+tags: linux bash

#+BEGIN_SRC sh :tangle ~/.bashrc
  export HISTSIZE=100000 SAVEHIST=100000
  # avoid duplicates..
  HISTCONTROL='ignoreboth:erasedups'
  # append history entries..
  shopt -s histappend
  
  # After each command, save and reload history
  export PROMPT_COMMAND="history -a; history -c; history -r; $PROMPT_COMMAND"
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bashrc
  case `id -u` in
      0) PROM="#";;
      *) PROM="$";;
  esac
  
  export PS1='\[\e[0;32m\]\h \[\e[0;33m\]\W/$(__git_ps1 "(%s)")\[\e[0;31m\] $PROM\[\e[m\] '
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bashrc
  case "$TERM" in
      screen*)
          export TERM=screen-256color
          ;;
  esac
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bashrc
  PATH=$PATH:/opt/local/bin
  PATH=$PATH:/opt/local/sbin
  PATH=$PATH:/opt/local/sbin
  PATH=$PATH:~/Apps/git-annex.linux/
  PATH=$PATH:~/source/bash
  PATH=$PATH:~/.bin/
  export PATH
  
  export LC_ALL=en_US.UTF-8  
  export LANG=en_US.UTF-8
  
  source ~/.bin/sftpfs
  
  if [ -f /etc/bash_completion.d/git-prompt ];
  then
      source /etc/bash_completion.d/git-prompt
  fi
  
  if [ -f /usr/share/bash-completion/completions/git ];
  then
      source /usr/share/bash-completion/completions/git
  fi
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bashrc
  function finder (){
      nautilus --no-desktop --browser "$1" > /dev/null 2>&1 &
  }
  
  alias ta='TERM=xterm-256color tmux attach -t default || TERM=xterm-256color tmux new-session -s default'
  function tmux-ssh (){
      printf '\033k%s\033\\' $1
      ssh $1 -t "tmux attach"
  }
  alias g='git'
  alias ga='git annex'
  alias gsync="anx;m push;src;m push"
  alias m='mr'
  alias rm='rm -i'
  alias ssl-ref='cd ~/ && /usr/bin/sslrefbox &>/dev/null &'
  alias ssl-sim='cd ~/Apps/grSim/bin/ && ~/Apps/grSim/bin/grSim &>/dev/null &'
  alias ssl-vis='cd ~/Apps/ssl-vision/ && ./bin/vision &>/dev/null &'
  alias ssl-cli='cd ~/Apps/ssl-vision/ && ./bin/client'
  alias ssl-gra-cli='cd ~/Apps/ssl-vision/ && ./bin/graphicalClient &>/dev/null &' 
  alias android-sim='cd ~/Apps/adt-bundle-linux-x86_64-20130219/sdk/tools && ./emulator'
  alias android-logcat='cd ~/Apps/adt-bundle-linux-x86_64-20130219/sdk/platform-tools && ./adb logcat -c && ./adb logcat'
  alias droid-build='lein do droid build, droid apk'
  alias droid-install='lein do droid install, droid run'
  alias droid-deploy='lein do droid build, droid apk && mv target/latte-debug.apk ~/Dropbox/public/'
  alias latte-ports='lein droid forward-port && ~/Apps/adt-bundle-linux-x86_64-20130219/sdk/platform-tools/adb forward tcp:8080 tcp:8080'
  alias wow='cd ~/wow && wine Wow.exe'
  alias cljsc='~/Dropbox/kiler/clojurescript/bin/cljsc'
  alias servedir='python -m SimpleHTTPServer'
  alias tc='truecrypt'
  # Get readable list of network IPs
  alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
  alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
  alias flush="dscacheutil -flushcache" # Flush DNS cache
  alias pgrep="ps ax | grep -i"
  alias hgrep="history | grep -i"
  alias ag="sudo apt-get"
  alias cls="clear"
  alias br="sudo service bluetooth restart"
  alias vpn="cd ~/Dropbox/bash && sudo ./vpn.sh"
  alias youtube-dl-1080="youtube-dl -f 37"
  alias youtube-dl-720="youtube-dl -f 22"
  alias sbuild="java -jar /home/nakkaya/annex/www/dropbox.nakkaya.com/builds/static-app.jar --build"
  alias sjetty="java -jar /home/nakkaya/annex/www/dropbox.nakkaya.com/builds/static-app.jar --jetty"
  alias ssh-x='ssh -c arcfour,blowfish-cbc -XC' 
  
  alias transmission-server="transmission-daemon -c /home/nakkaya/Downloads/ --incomplete-dir /home/nakkaya/Downloads/transmission-incomplete/ --download-dir /home/nakkaya/Downloads/ --no-auth"
  alias transmission-cli="transmission-remote-cli"
  alias s3sync="s3cmd sync --delete --acl-public"
  alias annex-size="s3cmd du -H s3://cloud-`git config remote.cloud.annex-uuid`"
  
  alias tor="~/Apps/tor/App/tor"
  
  ga_enc_mount(){
      DIR=$(basename $1)
      git annex unlock "${1}"
      encfs "${1}" "/home/nakkaya/$DIR"
  }
  
  ga_enc_umount(){
      DIR=$(basename $1)
      fusermount -u "/home/nakkaya/$DIR"
      git annex add "${1}"
      git commit -m 'Update'
  }
#+END_SRC

Autocomplete for 'g' as well,

#+BEGIN_SRC sh :tangle ~/.bashrc
  complete -o default -o nospace -F _git g
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bashrc
  if [ -f ~/.ssh/config ];
  then
      function _ssh_completion() {
          perl -ne 'print "$1 " if /^[Hh]ost (.+)$/' ~/.ssh/config
      }
      complete -W "$(_ssh_completion)" ssh
      complete -W "$(_ssh_completion)" tmux-ssh
  fi
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bashrc
  if [ -f ~/.mrconfig ];
  then
      function _mr_completion() {
          perl -ne 'print "$1 " if /^git_(.+)\s+=/' ~/.mrconfig
      }
      complete -W "$(_mr_completion)" mr
      complete -W "$(_mr_completion)" m
  fi
  
  if [ -d /media/nakkaya ];
  then
      usb(){
          if [ -d "/media/nakkaya/${1}/kiler" ];
          then
              cd "/media/nakkaya/${1}/kiler"
          else
              cd "/media/nakkaya/${1}/"
          fi
      }
      complete -W "`cd /media/nakkaya/;compgen -A directory`" usb
  fi
  
  src() {
      eval "cd ~/source/${1}"
  }
  complete -W "`cd ~/source/;compgen -A directory`" src
  
  anx() {
      eval "cd ~/annex/${1}"
  }
  complete -W "`cd ~/annex/;compgen -A directory`" anx
  
  runx () {
      DISPLAY=:0.0 ${1} &
  }
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bashrc
  case "$OSTYPE" in
      cygwin)
          alias open="cmd /c start"
          alias ls="ls -aG --color"
          export PATH="$PATH:/cygdrive/c/Dropbox/bash"
          clear () { command.COM /c cls;}
          export -f clear
          ;;
      linux-gnu)
          alias open="gnome-open"
          alias ls="ls -aG --color"
          alias df="df -h"
          alias du="du -hcs"
          alias emacs-nx='emacs &> /dev/null &'
          alias emacs="env TERM=xterm-256color emacs -nw"
          ;;
      darwin*)
          alias ls="ls -aG"
          alias emacs="env TERM=xterm-256color /opt/local/bin/emacs -nw"
          export CLOJURESCRIPT_HOME=/Users/nakkaya/Dropbox/kiler/clojurescript/
          alias open="open"
          ;;
  esac
  
  HOST=$(hostname)
   
  if [ "${HOST}" == "kocatepe" ]; then
      export PATH=~/Apps/jdk1.6.0_43/bin/:$PATH
      alias emacs="~/Apps/emacs/bin/emacs"
  fi
#+END_SRC

#+BEGIN_SRC sh :mkdirp yes :tangle ~/.bin/sftpfs
  _sftpfs(){
      local cur prev opts base
      COMPREPLY=()
      cur="${COMP_WORDS[COMP_CWORD]}"
      prev="${COMP_WORDS[COMP_CWORD-1]}"
  
      #  The basic options we'll complete.
      opts="mount umount"
  
      #  Complete the arguments to some of the basic commands.
      case "${prev}" in
          mount)
              local running=$(grep ^Host $HOME/.ssh/config | awk '{print $2}' | grep -v \*)
              COMPREPLY=( $(compgen -W "${running}" -- ${cur}) )
              return 0
              ;;
          umount)
              local running=$(ls --color=none /media/nakkaya/ | grep -v '\.')
              COMPREPLY=( $(compgen -W "${running}" -- ${cur}) )
              return 0
              ;;
          ,*)
              ;;
      esac
  
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
  }
  complete -F _sftpfs sftpfs
  
  case "${1}" in
      mount)
          echo "Mounting" $2
          mount_point="/media/nakkaya/$2"
          if [ -d "$mount_point" ]; then
              echo "Already Mounted"
          fi
          mkdir $mount_point
          mount_command="sshfs $2:/ $mount_point -oauto_cache,reconnect,compression=no,follow_symlinks"
          if [ ! -z $3 ]
          then
              echo "Port $3"
              mount_command="$mount_command,port=$3"
              echo $mount_command
          fi 
          eval $mount_command
          ;;
      umount)
          echo "Unmounting" $2
          mount_point="/media/nakkaya/$2"
  
          if [ ! -d "$mount_point" ]; then
              echo "Not Mounted"
          fi
          
          if fusermount -u $mount_point; then
              rm -rf $mount_point
          fi
          ;;
      ,*)
          ;;
  esac
#+END_SRC

#+BEGIN_SRC sh :mkdirp yes :tangle ~/.bin/vm
  _vm() {
      local cur prev opts base
      COMPREPLY=()
      cur="${COMP_WORDS[COMP_CWORD]}"
      prev="${COMP_WORDS[COMP_CWORD-1]}"
  
      #  The basic options we'll complete.
      opts="start start-head stop unplug running"
  
      #  Complete the arguments to some of the basic commands.
      case "${prev}" in
          start)
              local running=$(for x in `VBoxManage list vms | awk '{print $1}'`; do echo ${x} ; done )
              COMPREPLY=( $(compgen -W "${running}" -- ${cur}) )
              return 0
              ;;
          start-head)
              local running=$(for x in `VBoxManage list vms | awk '{print $1}'`; do echo ${x} ; done )
              COMPREPLY=( $(compgen -W "${running}" -- ${cur}) )
              return 0
              ;;
          stop)
              local names=$(for x in `VBoxManage list runningvms | awk '{print $1}'`; do echo ${x} ; done )
              COMPREPLY=( $(compgen -W "${names}" -- ${cur}) )
              return 0
              ;;
          unplug)
              local names=$(for x in `VBoxManage list runningvms | awk '{print $1}'`; do echo ${x} ; done )
              COMPREPLY=( $(compgen -W "${names}" -- ${cur}) )
              return 0
              ;;
          ,*)
              ;;
      esac
  
      COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
      return 0
  }
  complete -F _vm vm
  
  vm(){
      case "${1}" in
          start)
              echo "Starting" $2
              VBoxHeadless --startvm $2 --vrde off &
              disown
              return 0
              ;;
          start-head)
              echo "Starting" $2
              VBoxManage startvm $2 &
              disown
              return 0
              ;;
          stop)
              echo "Stopping" $2
              VBoxManage controlvm $2 acpipowerbutton
              return 0
              ;;
          unplug)
              echo "Unplugging" $2
              VBoxManage controlvm $2 poweroff
              return 0
              ;;
          running)
              VBoxManage list runningvms
              return 0
              ;;
          ,*)
              ;;
      esac
  }
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.profile
  # if running bash
  if [ -n "$BASH_VERSION" ]; then
      # include .bashrc if it exists
      if [ -f "$HOME/.bashrc" ]; then
          . "$HOME/.bashrc"
      fi
  fi
  
  if [ -d "$HOME/.bin/" ] ; then
      PATH="$HOME/.bin/:$PATH"
  fi
#+END_SRC

#+BEGIN_SRC sh :mkdirp yes :tangle ~/.bin/lock-screen
  #!/usr/bin/env bash
  cd ~/
  mr fastPush
  
  gnome-screensaver-command -l
  until gnome-screensaver-command -q | grep -m 1 "inactive"; do sleep 1 ; done
  
  echo "Downloading Chages"
  echo `date`
  cd ~/
  mr up
#+END_SRC

#+BEGIN_SRC sh :mkdirp yes :tangle ~/.bin/sleep-computer
  #!/usr/bin/env bash
  cd ~/
  mr fastPush
  
  gnome-screensaver-command -l
  
  dbus-send --print-reply --system --dest=org.freedesktop.UPower /org/freedesktop/UPower org.freedesktop.UPower.Suspend
  
  until gnome-screensaver-command -q | grep -m 1 "inactive"; do sleep 1 ; done
  
  echo "Downloading Chages"
  echo `date`
  cd ~/
  mr up
#+END_SRC

#+BEGIN_SRC sh :mkdirp yes :tangle ~/.bin/annex-attach
  #!/usr/bin/env bash
  
  DISKS="damla esra merve ozge sedef"
  
  for i in $DISKS; do 
      sudo mkdir /media/nakkaya/$i
      sudo mount /dev/disk/by-label/$i /media/nakkaya/$i
  done
#+END_SRC

#+BEGIN_SRC sh :mkdirp yes :tangle ~/.bin/annex-detach
  #!/usr/bin/env bash
  
  DISKS="damla esra merve ozge sedef"
  
  for i in $DISKS; do 
      sudo umount /media/nakkaya/$i
      sudo rm -r /media/nakkaya/$i
  done
#+END_SRC
