#+title: Notes on Synchronization and Backup of $HOME using git, git-annex and mr
#+tags: git git-annex mr configuration

This is a dump of all git, git-annex and mr related configuration and
scripts so I can edit them in one place. When [[http://orgmode.org/manual/Working-With-Source-Code.html][tangled]],

 - All mr configs will go into their respective folders.
 - All Bash scripts will go into ~/.bin/ folder.

Repository structure,

 - ~/annex/ - git-annex repositories that are synced between
   computers.
 - ~/source/ - Git repos.
 - /external - Single git-annex repo spread over multiple USB
   drives. Working as a Poor Mans Raid.

* ~/annex/

   Instead of having a single large annex folder synced across
   machines, I have split all files into 6 annexes,

   - documents
   - music
   - notes
   - old-code
   - photos

   This scheme makes git-annex much faster. At first I was reluctant
   to go with this, instead of pushing pulling single annex, now I
   have to deal with 6. Then I found about [[http://myrepos.branchable.com/][mr]] which lets you run
   commands on a collection of repositories, even though there are 6
   repos with mr a single command will push pull all of them.

   These annexes are shared between 3 computers (one with two full
   copy of all repos and two with partial copies.), all behind NAT so
   all clients dump data to rsync.net (GPG encrypted with separate keys.)
   and sync changes with a repo inside rsync.net.

   When ever I make changes to any of the repos, I just run /mr push/.
   It will iterate repositories with changes (new files/deletes/renames)
   and upload changes to and sync with rsync.net. Then when I
   switch machines I just do a /mr pull/ which downloads all changes.

*** ~/.mrconfig

#+BEGIN_SRC conf :tangle ~/.mrconfig
  include = cat ~/annex/.mrconfig-annex ~/source/.mrconfig-source
  jobs = 3
#+END_SRC

*** ~/annex/.mrconfig

#+BEGIN_SRC conf :tangle ~/annex/.mrconfig-annex
  [DEFAULT]
  git_sync = git annex sync "$@"
  git_status = git annex status
  git_drop = git-drop-unused here 0
  git_dead = git annex dead "$@"
  git_missing = echo "Nothing todo.";true
  git_ffsck = echo "Nothing todo.";true
  git_move = echo "Nothing todo.";true
  git_free = git annex drop .
  
  lib = 
      enableCloud() {
         git config remote.origin.annex-ignore true
         git annex init "`hostname`"
         git annex enableremote depot
         git annex untrust here
      }
      checkMissingFiles() {
        echo "$1"
        git annex find . --not --in "$1"
      }
      fastFsChck() {
        git annex fsck --fast --from "$1"
      }
      moveTo() {
        git annex add .
        git annex copy . --to "$1" --not --in "$1"
        git annex move . --to "$2" --not --in "$2"
        git annex sync
      }
      copyTo() {
        git annex add .
        git annex copy . --to "$1" --not --in "$1"
        git annex copy . --to "$2" --not --in "$2"
        git annex sync
      }
  
  [annex/documents]
  checkout = git clone 'ssh://rsync/~/git-bare/documents.git' 'documents'
             cd documents/
             enableCloud
             git annex enableremote "rsync-base"
  skip = lazy
  drop = git-anx-drop-unused here 0
         git-anx-drop-unused depot 0
  missing = checkMissingFiles depot
            checkMissingFiles rsync-base
  ffsck = fastFsChck depot
          fastFsChck rsync-base
  free = git annex drop Binary Books Mail Papers Personal Source VMs
  move = moveTo "rsync-base" "depot"
  copy = copyTo "rsync-base" "depot"
  
  [annex/notes]
  checkout = git clone 'ssh://rsync/~/git-bare/notes.git' 'notes'
             cd notes/
             git config remote.origin.annex-ignore true
             git annex init "`hostname`"
             git annex untrust here
             git annex enableremote "rsync-base"
  sync = git annex add .
         git annex sync
         git annex get .
         git annex copy --to rsync-base --not --in rsync-base
         git annex sync
  pull = mr sync
  drop = git-anx-drop-unused here 0
  missing = checkMissingFiles "rsync-base"
  free = true
  ffsck = fastFsChck "rsync-base"
  
  [annex/kiler]
  skip = lazy
  pull = mr sync
  push = mr sync
  drop = git-anx-drop-unused here 0
         git-anx-drop-unused base 30
  missing = checkMissingFiles base
  move = git annex add .
         git annex move . --to base --not --in base
         git annex sync
  copy = git annex add .
         git annex copy . --to base --not --in base
         git annex sync
#+END_SRC

*** ~/.bin/git-anx-drop-unused

Drop all unused files by date,

#+BEGIN_SRC hy :tangle ~/.bin/git-anx-drop-unused :padline no
  #!/usr/bin/env hy
  
  (import  [sh [grep git perl awk ErrorReturnCode]]
           [re [split]]
           [datetime [datetime date]]
           [sys])
  
  (def remote (if (>= (len sys.argv) 2)
                (second sys.argv)
                "here"))
  
  (def drop-age (if (= (len sys.argv) 3)
                  (int (nth sys.argv 2))
                  180))
  
  (defn unused-files []
    (let [[files (try 
                  (-> (.annex git "unused" "--from" remote)
                      (perl "-ne" "print if /^    [0-9]+.*/")
                      str)
                  (catch [e ErrorReturnCode] ""))]
          [unused-files (->> files 
                             (split "\n")
                             (map (fn [x] 
                                    (->> (.strip x)
                                         (split " +")
                                         (take 2)
                                         (map (fn [x] (.strip x))))))
                             (filter (fn [x] 
                                       (= (len x) 2)))
                             list)]]
      (print "Unused files: " (len unused-files))
      unused-files))
  
  (defn last-seen [file]
    (let [[key (second file)]]
      (->> (git "--no-pager" "log" "-1" "-S" key "--pretty=format:%at")
           str
           (split "\n")
           (map (fn [x] (.fromtimestamp datetime (float x))))
           first)))
  
  (defn age [file]
    (let [[delta (- (.today datetime) (last-seen file))]]
      delta.days))
  
  (print "Dropping " remote)
  
  (if (= drop-age 0)
    (for [file (unused-files)]
      (let [[id (first file)]]
        (print "Id " id)
        (if (= remote "here")
          (.annex git "dropunused" "--force" (str id))
          (.annex git "dropunused" "--force" "--from" remote (str id)))))
    (for [file (unused-files)]
      (let [[id (first file)]
            [file-age (age file)]]
        
        (if (>= file-age drop-age)
          (do 
           (print "Id " id " age " file-age " days...")
           (if (= remote "here")
             (.annex git "dropunused" "--force" (str id))
             (.annex git "dropunused" "--force" "--from" remote (str id))))))))
#+END_SRC

*** ~/.bin/git-fast-push

Custom push command. For repositories with no changes it simply
returns true, for repositories with changes or new files,

 - If acting on a regular git repo, pushes changes to origin.
 - If acting on a git annex repo, uploads changes and sync with
   rsync.net.

#+BEGIN_SRC sh :tangle ~/.bin/git-fast-push
  #/bin/bash
  
  updateAnnexHost() {
      echo 'Updating Remote...'
      ORIGIN=`git config --get remote.origin.url`
      HOST=`echo "$ORIGIN" | grep -oiP '//.*?\/' | cut -d/ -f3`
      DIR="/${ORIGIN#*//*/}"
      echo "$HOST $DIR"
      ssh $HOST "cd $DIR;git annex sync"
  }
  
  hasNoChanges(){
      git diff-index --quiet HEAD --
  }
  
  hasNewFiles(){
      if [ `git ls-files --exclude-standard --others| wc -l` != 0 ]; then 
          true
      else
          false
      fi
  }
  
  isRepoAhead(){
      if [ `git log origin/$(git branch | grep '*' | cut -d' ' -f2)..HEAD | wc -l` != 0 ]; then 
          true
      else
          false
      fi
  }
  
  #handle direct annex repo
  if `git config --get annex.direct`; then
      oldHead=`git rev-parse HEAD`
      git annex add .
      git annex sync
      newHead=`git rev-parse HEAD`
      if [ "$oldHead" != "$newHead" ]; then
          if git config remote.depot.annex-uuid; then
              git annex copy --to depot --not --in depot
              git annex sync
          else
              git annex copy --to origin --not --in origin
              updateAnnexHost
          fi
      fi
      exit
  fi
  
  if ! hasNoChanges || hasNewFiles || isRepoAhead; then 
  #handle indirect annex repo
      if [ -d '.git/annex/' ]; then    
          git annex add .
          git annex sync
          if git config remote.depot.annex-uuid; then
              git annex copy --to depot --not --in depot
              git annex sync
          else
              git annex copy --to origin --not --in origin
              updateAnnexHost
          fi
          exit
  #handle plain git repo        
      else
          git push origin master
      fi
  else
      true
  fi
#+END_SRC

*** Mount / Unmount EncFS Volumes

    Scripts for mounting and unmounting EncFS Volumes.

#+BEGIN_SRC sh :tangle ~/.bin/git-anx-enc-mount
  #/bin/bash
  
  CUR_DIR=`pwd`
  cd "$1"
  DIR=$(basename "$1")
  mkdir "/Volumes/$DIR"
  git annex get .
  git annex unlock "."
  encfs "$CUR_DIR/${1}" "/Volumes/$DIR"
  cd $CUR_DIR
#+END_SRC

#+BEGIN_SRC sh :tangle ~/.bin/git-anx-enc-umount
  #/bin/bash
  
  CUR_DIR=`pwd`
  DIR=$(basename "$1")
  if umount "/Volumes/$DIR"; then
      rm -rf "/Volumes/$DIR"
  fi
  cd "$1"
  git annex add .
  git annex add .encfs6.xml
  git commit -m 'Update'
  cd $CUR_DIR
#+END_SRC

*** Webapp

Create autostart file relative paths don't work so tangle one file for
each OS (Linux,OS X) then mv one to correct location,

#+BEGIN_SRC conf :tangle ~/.config/git-annex/autostart-linux :mkdirp yes
  /home/nakkaya/annex/notes
  /home/nakkaya/annex/music
  /home/nakkaya/annex/wallet
  /home/nakkaya/annex/photos
  /home/nakkaya/annex/old-code
  /home/nakkaya/annex/documents
#+END_SRC

#+BEGIN_SRC conf :tangle ~/.config/git-annex/autostart-osx :mkdirp yes
  /Users/nakkaya/annex/notes
  /Users/nakkaya/annex/music
  /Users/nakkaya/annex/wallet
  /Users/nakkaya/annex/photos
  /Users/nakkaya/annex/documents
#+END_SRC

Start asistant and webapp,

#+BEGIN_SRC sh :tangle ~/.bin/gwebapp :mkdirp yes
  git annex assistant --autostart && nohup git annex webapp
#+END_SRC

*** Misc

    Setup encrypted annex directory remote,

    #+BEGIN_SRC sh
      git annex initremote mobile type=directory directory=/path/to/annex/repo/ encryption=hybrid keyid=ID embedcreds=yes
    #+END_SRC

    Setup encrypted annex S3 remote,

    #+BEGIN_SRC sh
      export AWS_ACCESS_KEY_ID="KID"
      export AWS_SECRET_ACCESS_KEY="SKEY"
      git annex initremote cloud type=S3 encryption=hybrid keyid=ID embedcreds=yes
      git setup-bitbucket
      git config remote.origin.annex-ignore true
    #+END_SRC

    Setup encrypted annex rsync remote,

    #+BEGIN_SRC sh
      git annex initremote depot type=rsync encryption=hybrid rsyncurl=rsync:annex/repo/ keyid=ID
    #+END_SRC

* ~/source/

*** ~/source/.mrconfig

  Git Repos,

#+BEGIN_SRC conf :tangle ~/source/.mrconfig-source
  [DEFAULT]
  git_pull = git pull origin master
  git_push = git fast-push
  git_status = git status --short
  sync = true
  
  [source/latte]
  checkout = git clone 'ssh://11837@rsync/~/latte.git' 'latte'
  skip=lazy
  
  [source/alter-ego]
  checkout = git clone 'git@github.com:nakkaya/alter-ego.git' 'alter-ego'
  skip=lazy
  
  [source/ardrone]
  checkout = git clone 'git@github.com:nakkaya/ardrone.git' 'ardrone'
  skip=lazy
  
  [source/clodiuno]
  checkout = git clone 'git@github.com:nakkaya/clodiuno.git' 'clodiuno'
  skip=lazy
  
  [source/easy-dns]
  checkout = git clone 'git@github.com:nakkaya/easy-dns.git' 'easy-dns'
  skip=lazy
  
  [source/emacs]
  checkout = git clone 'git@github.com:nakkaya/emacs.git' 'emacs'
             cd emacs
             git submodule init
             git submodule update
  
  [source/inbox-feed]
  checkout = git clone 'git@github.com:nakkaya/inbox-feed.git' 'inbox-feed'
  skip=lazy
  
  [source/nakkaya.com]
  checkout = git clone 'git@github.com:nakkaya/nakkaya.com.git' 'nakkaya.com'
  skip=lazy
  
  [source/net-eval]
  checkout = git clone 'git@github.com:nakkaya/net-eval.git' 'net-eval'
  skip=lazy
  
  [source/neu-islanders]
  checkout = git clone 'ssh://11837@rsync/~/neu-islanders.git' 'neu-islanders'
  skip=lazy
  
  [source/pid]
  checkout = git clone 'git@github.com:nakkaya/pid.git' 'pid'
  skip=lazy
  
  [source/static]
  checkout = git clone 'git@github.com:nakkaya/static.git' 'static'
  skip=lazy
  
  [source/vector-2d]
  checkout = git clone 'git@github.com:nakkaya/vector-2d.git' 'vector-2d'
  skip=lazy
  
  [source/doganilic.com]
  checkout = git clone 'ssh://rsync/~/git-bare/doganilic.com.git' 'doganilic.com'
  skip=lazy
  
  [source/coin-trader]
  checkout = git clone 'ssh://rsync/~/git-bare/coin-trader.git' 'coin-trader'
  skip=lazy
  
  [source/vehicle-tracking]
  checkout = git clone 'git@gitlab.neu.edu.tr:nakkaya/vehicle-tracking.git' 'vehicle-tracking'
  skip=lazy
#+END_SRC
